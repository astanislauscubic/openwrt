diff -uNr linux-3.10.49/drivers/misc/antenna-wibe.c linux-3.10.49/drivers/misc/antenna-wibe.c
--- linux-3.10.49/drivers/misc/antenna-wibe.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.10.49/drivers/misc/antenna-wibe.c	2015-04-08 12:43:47.300000000 +0100
@@ -0,0 +1,152 @@
+/*
+ * For the Deltenna WiBE 4G
+ *
+ * Copyright 2015 Byron Bradley <byronb@afterthoughtsoftware.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/init.h>
+#include <linux/gpio.h>
+#include <linux/device.h>
+
+#define ANTENNA_GPIO_V1		11
+#define ANTENNA_GPIO_V2		7
+#define MODEM_GPIO_CD		8
+#define MODEM_GPIO_IO		10
+
+static int active_antenna = 0;
+
+static struct gpio antenna_gpios[] = {
+	{ ANTENNA_GPIO_V1, GPIOF_OUT_INIT_LOW, "ANTENNA_GPIO_LATCH" },
+	{ ANTENNA_GPIO_V2, GPIOF_OUT_INIT_LOW, "ANTENNA_GPIO_DATA" },
+};
+
+static struct gpio modem_gpios[] = {
+	{ MODEM_GPIO_CD, GPIOF_IN | GPIOF_EXPORT_DIR_FIXED,		"MODEM_GPIO_CD" },
+	{ MODEM_GPIO_IO, GPIOF_OUT_INIT_HIGH | GPIOF_EXPORT_DIR_FIXED,	"MODEM_GPIO_IO" },
+};
+
+static ssize_t show_antenna(struct device *dev, struct device_attribute *attr,
+			    char *buf)
+{
+	switch (active_antenna) {
+		case 0:
+			return snprintf(buf, PAGE_SIZE, "back\n");
+		case 1:
+			return snprintf(buf, PAGE_SIZE, "right\n");
+		case 2:
+			return snprintf(buf, PAGE_SIZE, "left\n");
+		case 3:
+			return snprintf(buf, PAGE_SIZE, "front\n");
+		default:
+			return snprintf(buf, PAGE_SIZE, "unknown\n");
+	}
+}
+
+static size_t change_antenna(int antenna, size_t count)
+{
+	switch (antenna) {
+		case 0:
+			gpio_set_value(ANTENNA_GPIO_V1, 0);
+			gpio_set_value(ANTENNA_GPIO_V2, 0);
+			active_antenna = antenna;
+			return count;
+		case 1:
+			gpio_set_value(ANTENNA_GPIO_V1, 0);
+			gpio_set_value(ANTENNA_GPIO_V2, 1);
+			active_antenna = antenna;
+			return count;
+		case 2:
+			gpio_set_value(ANTENNA_GPIO_V1, 1);
+			gpio_set_value(ANTENNA_GPIO_V2, 0);
+			active_antenna = antenna;
+			return count;
+		case 3:
+			gpio_set_value(ANTENNA_GPIO_V1, 1);
+			gpio_set_value(ANTENNA_GPIO_V2, 1);
+			active_antenna = antenna;
+			return count;
+		default:
+			return -EINVAL;
+	}
+}
+
+static ssize_t store_antenna(struct device *dev, struct device_attribute *attr,
+			   const char *buf, size_t count)
+{
+	if (count < 1)
+		return -EINVAL;
+
+	return change_antenna(buf[0] - '0', count);
+}
+
+static DEVICE_ATTR(antenna, 0666, show_antenna, store_antenna);
+
+static int wibeantenna_probe(struct platform_device *pdev)
+{
+	int ret;
+
+	dev_err(&pdev->dev, "Probing leds-antenna\n");
+
+	ret = device_create_file(&pdev->dev, &dev_attr_antenna);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "Failed to register sysfs antenna\n");
+		return ret;
+	}
+
+	ret = gpio_request_array(antenna_gpios, ARRAY_SIZE(antenna_gpios));
+	if (ret < 0) {
+		dev_err(&pdev->dev, "Failed to register antenna GPIOs\n");
+		return ret;
+	}
+
+	ret = gpio_request_array(modem_gpios, ARRAY_SIZE(modem_gpios));
+	if (ret < 0) {
+		dev_err(&pdev->dev, "Failed to register modem GPIOs\n");
+		gpio_free_array(antenna_gpios, ARRAY_SIZE(antenna_gpios));
+		return ret;
+	}
+
+	return 0;
+}
+
+static int wibeantenna_remove(struct platform_device *pdev)
+{
+	gpio_free_array(antenna_gpios, ARRAY_SIZE(antenna_gpios));
+	gpio_free_array(modem_gpios, ARRAY_SIZE(modem_gpios));
+
+	device_remove_file(&pdev->dev, &dev_attr_antenna);
+
+	return 0;
+}
+
+static struct of_device_id wibe_of_match[] = {
+	{ .compatible = "deltenna,wibe-antenna", },
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, wibe_of_match);
+
+static struct platform_driver wibeanenna_driver = {
+	.probe		= wibeantenna_probe,
+	.remove		= wibeantenna_remove,
+	.driver		= {
+		.name		= "wibe-antenna",
+		.owner		= THIS_MODULE,
+		.of_match_table	= of_match_ptr(wibe_of_match),
+	},
+};
+
+module_platform_driver(wibeanenna_driver);
+
+MODULE_AUTHOR("Byron Bradley <byronb@afterthoughtsoftware.com>");
+MODULE_DESCRIPTION("Deltenna WiBE Antenna");
+MODULE_LICENSE("GPL");
diff -uNr linux-3.10.49/drivers/misc/Kconfig linux-3.10.49/drivers/misc/Kconfig
--- linux-3.10.49/drivers/misc/Kconfig	2015-04-08 14:14:15.212000000 +0100
+++ linux-3.10.49/drivers/misc/Kconfig	2015-04-08 11:52:23.700000000 +0100
@@ -527,6 +527,13 @@
 	  the genalloc API. It is supposed to be used for small on-chip SRAM
 	  areas found on many SoCs.
 
+config WIBE_ANTENNA
+	tristate "WiBE Antenna Support"
+	depends on SOC_RT305X && SYSFS
+	default	n
+	help
+	  Deltenna WiBE Antenna Support
+
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
diff -uNr linux-3.10.49/drivers/misc/Makefile linux-3.10.49/drivers/misc/Makefile
--- linux-3.10.49/drivers/misc/Makefile	2015-04-08 14:14:17.404000000 +0100
+++ linux-3.10.49/drivers/misc/Makefile	2015-04-08 11:53:05.484000000 +0100
@@ -53,3 +53,4 @@
 obj-$(CONFIG_VMWARE_VMCI)	+= vmw_vmci/
 obj-$(CONFIG_LATTICE_ECP3_CONFIG)	+= lattice-ecp3-config.o
 obj-$(CONFIG_SRAM)		+= sram.o
+obj-$(CONFIG_WIBE_ANTENNA)	+= antenna-wibe.o
