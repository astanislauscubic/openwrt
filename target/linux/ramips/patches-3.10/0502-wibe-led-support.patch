diff -uNr linux-3.10.49/drivers/leds/Kconfig linux-3.10.49/drivers/leds/Kconfig
--- linux-3.10.49/drivers/leds/Kconfig	2014-07-17 23:58:15.000000000 +0100
+++ linux-3.10.49/drivers/leds/Kconfig	2015-03-13 16:53:09.341765279 +0000
@@ -151,6 +151,13 @@
 	  This option enables LED support for the handheld
 	  HP Jornada 620/660/680/690.
 
+config LEDS_WIBE
+	tristate "LED Support for the Deltenna WiBE 4G"
+	depends on LEDS_CLASS
+	depends on SOC_RT305X
+	help
+	  This option enables LED support for the Deltenna WiBE 4G
+
 config LEDS_PCA9532
 	tristate "LED driver for PCA9532 dimmer"
 	depends on LEDS_CLASS
diff -uNr linux-3.10.49/drivers/leds/leds-wibe.c linux-3.10.49/drivers/leds/leds-wibe.c
--- linux-3.10.49/drivers/leds/leds-wibe.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.10.49/drivers/leds/leds-wibe.c	2015-03-17 15:19:26.238455567 +0000
@@ -0,0 +1,167 @@
+/*
+ * For the Deltenna WiBE 4G
+ *
+ * Copyright 2015 Byron Bradley <byronb@afterthoughtsoftware.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/init.h>
+#include <linux/leds.h>
+#include <linux/gpio.h>
+
+static unsigned short cat4016_state = 0;
+static DEFINE_SPINLOCK(cat4016_lock);
+
+#define LED_GPIO_LATCH	9
+#define LED_GPIO_DATA	12
+#define LED_GPIO_CLOCK	13
+#define LED_GPIO_BLANK	14
+
+static struct gpio led_gpios[] = {
+	{ LED_GPIO_LATCH,	GPIOF_OUT_INIT_LOW, "LED_GPIO_LATCH" },
+	{ LED_GPIO_DATA,	GPIOF_OUT_INIT_LOW, "LED_GPIO_DATA" },
+	{ LED_GPIO_CLOCK,	GPIOF_OUT_INIT_LOW, "LED_GPIO_CLOCK" },
+	{ LED_GPIO_BLANK,	GPIOF_OUT_INIT_LOW, "LED_GPIO_BLANK" },
+};
+
+struct wibe_led {
+	char *name;
+	u32 bit;
+	struct led_classdev led_cdev;
+};
+
+static struct wibe_led wibe_leds[] = {
+	{ .name = "wibe:power:red",	.bit = 0 },
+	{ .name = "wibe:wifi:red",	.bit = 1 },
+	{ .name = "wibe:right:red",	.bit = 2 },
+	{ .name = "wibe:right:green",	.bit = 3 },
+	{ .name = "wibe:left:red",	.bit = 4 },
+	{ .name = "wibe:left:green",	.bit = 5 },
+	{ .name = "wibe:front:red",	.bit = 6 },
+	{ .name = "wibe:front:green",	.bit = 7 },
+	{ .name = "wibe:back:red",	.bit = 8 },
+	{ .name = "wibe:back:green",	.bit = 9 },
+	{ .name = "wibe:3g:red",	.bit = 10},
+	{ .name = "wibe:3g:green",	.bit = 11},
+};
+
+static struct wibe_led *
+led_classdev_to_wibe_led(struct led_classdev *led_cdev)
+{
+	return container_of(led_cdev, struct wibe_led, led_cdev);
+}
+
+static void write_cat4016(u32 bit, enum led_brightness value)
+{
+	int i;
+	unsigned long flags = 0;
+
+	spin_lock_irqsave(&cat4016_lock, flags);
+
+	if (value)
+		cat4016_state |= (1 << (bit));
+	else
+		cat4016_state &= ~(1 << (bit));
+
+	gpio_direction_output(LED_GPIO_LATCH, 0);
+	gpio_direction_output(LED_GPIO_DATA, 0);
+	gpio_direction_output(LED_GPIO_CLOCK, 0);
+	gpio_direction_output(LED_GPIO_BLANK, 0);
+
+	for (i = 0; i < 16; i++) {
+		gpio_set_value(LED_GPIO_DATA, (cat4016_state & (1 << (15 - i))) ? 1 : 0);
+		gpio_set_value(LED_GPIO_CLOCK, 1);
+		gpio_set_value(LED_GPIO_CLOCK, 0);
+	}
+
+	gpio_set_value(LED_GPIO_DATA, 0);
+	gpio_set_value(LED_GPIO_LATCH, 1);
+	gpio_set_value(LED_GPIO_LATCH, 0);
+
+	spin_unlock_irqrestore(&cat4016_lock, flags);
+}
+
+
+static void wibe_led_set(struct led_classdev *led_cdev,
+	enum led_brightness value)
+{
+	struct wibe_led *wled = led_classdev_to_wibe_led(led_cdev);
+
+	write_cat4016(wled->bit, value);
+}
+
+static int wibeled_probe(struct platform_device *pdev)
+{
+	int ret, i;
+	struct wibe_led *wled;
+	struct led_classdev *led;
+
+	dev_err(&pdev->dev, "Probing leds-wibe\n");
+
+	ret = gpio_request_array(led_gpios, ARRAY_SIZE(led_gpios));
+	if (ret < 0) {
+		dev_err(&pdev->dev, "Failed to register LED GPIOs\n");
+		return ret;
+	}
+
+	for (i = 0; i < ARRAY_SIZE(wibe_leds); ++i) {
+		wled = &wibe_leds[i];
+		led = &wled->led_cdev;
+
+		led->name = wled->name;
+		led->brightness = LED_OFF;
+		led->brightness_set = wibe_led_set;
+		led->flags = LED_CORE_SUSPENDRESUME;
+
+		ret = led_classdev_register(&pdev->dev, led);
+		if (ret != 0) {
+			dev_err(&pdev->dev, "Failed to register WiBE LED %d\n", i);
+		}
+	}
+
+	return 0;
+}
+
+static int wibeled_remove(struct platform_device *pdev)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(wibe_leds); ++i) {
+		led_classdev_unregister(&wibe_leds[i].led_cdev);
+	}
+
+	gpio_free_array(led_gpios, ARRAY_SIZE(led_gpios));
+
+	return 0;
+}
+
+static struct of_device_id wibe_of_match[] = {
+	{ .compatible = "deltenna,wibe-leds", },
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, wibe_of_match);
+
+static struct platform_driver wibeled_driver = {
+	.probe		= wibeled_probe,
+	.remove		= wibeled_remove,
+	.driver		= {
+		.name		= "wibe-led",
+		.owner		= THIS_MODULE,
+		.of_match_table	= of_match_ptr(wibe_of_match),
+	},
+};
+
+module_platform_driver(wibeled_driver);
+
+MODULE_AUTHOR("Byron Bradley <byronb@afterthoughtsoftware.com>");
+MODULE_DESCRIPTION("Deltenna WiBE LEDs");
+MODULE_LICENSE("GPL");
diff -uNr linux-3.10.49/drivers/leds/Makefile linux-3.10.49/drivers/leds/Makefile
--- linux-3.10.49/drivers/leds/Makefile	2015-02-23 16:49:45.781067924 +0000
+++ linux-3.10.49/drivers/leds/Makefile	2015-03-13 16:53:25.389473148 +0000
@@ -31,6 +31,7 @@
 obj-$(CONFIG_LEDS_TCA6507)		+= leds-tca6507.o
 obj-$(CONFIG_LEDS_CLEVO_MAIL)		+= leds-clevo-mail.o
 obj-$(CONFIG_LEDS_HP6XX)		+= leds-hp6xx.o
+obj-$(CONFIG_LEDS_WIBE)			+= leds-wibe.o
 obj-$(CONFIG_LEDS_OT200)		+= leds-ot200.o
 obj-$(CONFIG_LEDS_FSG)			+= leds-fsg.o
 obj-$(CONFIG_LEDS_PCA955X)		+= leds-pca955x.o
